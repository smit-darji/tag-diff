name: Published and Edited Diff Workflow

on: 
  release: 
    types: [published, edited]
    branches:
      - Master

jobs:
  diff_published:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Set up GitHub CLI
        uses: cli/cli@v2
        with:
          version: 'latest'

      - name: Get the current release information
        id: get_current_release
        run: |
          CURRENT_RELEASE=${{ github.event.release.tag_name }}
          echo "current_release=$CURRENT_RELEASE" >> $GITHUB_ENV
          echo "Current Release is: $CURRENT_RELEASE"

      - name: Get previous release
        id: get_previous_release
        run: |
          # List releases and get the previous one
          PREVIOUS_RELEASE=$(gh release list --json tagName --jq '.[] | select(.tagName != env.current_release) | .tagName' | head -n 1)
          echo "previous_release=$PREVIOUS_RELEASE" >> $GITHUB_ENV
          echo "Previous Release is: $PREVIOUS_RELEASE"

      - name: Check environment variables
        run: |
          echo "current_release=${{ env.current_release }}"
          echo "previous_release=${{ env.previous_release }}"

      - name: Get list of changed files
        id: set-changed-files
        run: |
          if [ -z "${{ env.previous_release }}" ]; then
            echo "No previous release found, skipping diff."
            echo "changedfiles=[]" >> $GITHUB_OUTPUT
          else
            # Get the commit hashes for the previous and current releases
            PREV_COMMIT=$(gh release view ${{ env.previous_release }} --json targetCommitish --jq '.targetCommitish')
            CURRENT_COMMIT=$(gh release view ${{ env.current_release }} --json targetCommitish --jq '.targetCommitish')

            # Perform the diff
            changedfiles=$(git diff --name-only $PREV_COMMIT $CURRENT_COMMIT | uniq | jq -R -s -c 'split("\n")[:-1]')
            echo "changedfiles=$changedfiles" >> $GITHUB_OUTPUT
          fi

      - name: Output changed files
        run: |
          echo "Changed files between ${{ env.previous_release }} and ${{ env.current_release }}: ${{ steps.set-changed-files.outputs.changedfiles }}"
